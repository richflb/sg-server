generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Address {
  id         Int          @id @default(autoincrement())
  city       String       @db.VarChar(50)
  state      String       @db.VarChar(50)
  country    String       @db.VarChar(50)
  street     String       @db.VarChar(150)
  zipCode    String       @db.VarChar(25)
  userID     String?         @unique
  Users      Users?       @relation(fields: [userID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Legal_Info Legal_Info[]
}

model Contacts {
  id         Int          @id @default(autoincrement())
  phone      String?      @unique @db.VarChar(25)
  instagram  String?      @unique
  facebook   String?      @unique
  whatsapp   String?      @unique @db.VarChar(25)
  viber      String?      @unique @db.VarChar(25)
  line       String?      @unique @db.VarChar(25)
  wechat     String?      @unique @db.VarChar(25)
  skype      String?      @unique @db.VarChar(25)
  userID     String          @unique
  profileID  Int?
  Profile    Profile?     @relation(fields: [profileID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Users      Users        @relation(fields: [userID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Legal_Info Legal_Info[]
}

model Legal_Info {
  id        Int       @id @default(autoincrement())
  fullName  String    @db.VarChar(150)
  birthDate String    @db.VarChar(10)
  CPF       String    @unique @db.VarChar(14)
  CRG       String    @unique @db.VarChar(14)
  userID    String       @unique
  contactID Int?
  addressID Int
  Address   Address   @relation(fields: [addressID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Contacts  Contacts? @relation(fields: [contactID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Users     Users     @relation(fields: [userID], references: [id])
}

model Profile {
  id                Int        @id @default(autoincrement())
  firstName         String     @db.VarChar(50)
  lastName          String     @db.VarChar(50)
  optName           String?    @db.VarChar(50)
  gender            String?    @db.VarChar(10)
  bio               String?    @db.VarChar(4096)
  profilePicFolder  String?    @db.VarChar(150)
  capaPicFolder     String?    @db.VarChar(150)
  userID            String     @unique
  Contacts  Contacts[]
  Posts     Posts[]
  Users     Users      @relation(fields: [userID], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Posts {
  id          Int       @id @default(autoincrement())
  imageURL    String    @db.VarChar(255)
  legend      String?   @db.VarChar(2048)
  profileID   Int
  Profile     Profile   @relation(fields: [profileID], references: [id], onDelete: NoAction, onUpdate: NoAction)

}

model Users {
  id          String       @id     @default(cuid())
  userName       String          @db.VarChar(50)
  email          String       @unique   @db.VarChar(50)
  password       String                   @db.VarChar(255)
  legalInfoID    Int?         @unique
  Address        Address[]
  Authentication Authentication[]
  Contacts       Contacts[]
  Legal_Info     Legal_Info?
  Profile        Profile?
}

model Authentication {
  id           String @id @default(cuid())
  userID       String
  email        String  @unique @db.VarChar(150)
  password     String  @db.VarChar(255)
  refreshToken String?
  Users        Users   @relation(fields: [userID], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
